Assign4: Due 11:59PM April 12th

A company is in the business of buying rods in wholesale, cutting it, and
selling the pieces in the retail market. The market fluctuates and the price 
for different sizes of rods changes by the day. Here's where we come in, the
company wants our help to know how much maximum money they can make, and how 
to cut the rods of a given length to get that maximum money.

For example, if the rods of various lengths sell at the following prices on
a given day:

Inch   price
1       $1
2       $1
3       $2
4       $3
5       $4
6       $5
7       $5
8       $9
9       $9
10      $10

Cutting a 20 inches rod into ten pieces of 2 inches each will only get them 
$10. However, if they cut it into 6 pieces of two 8-inches, and four 1-inches
will get them $22. There may be other combinations that produce better price.
The additional challenge is the prices fluctuate each day.

We're asked to write a program, but in a way the algorithm for computing
the sizes can be changed.

Write a class RodCutter that will take the various lengths and their prices.
Then write one method on the class, cutRod that takes a length as parameter
and returns two things - maximum price the company can expect and the
size of the rods that they should cut the given length to get that price.
For example, if the input parameter is 2 (and the prices are as above),
then the output will be $2 and the sizes will be 1, 1 (for 2 pieces).

First write the class RodCutter so it works with a simple algorithm.
Then (and only after fully completing the above, not before), create another
version of RodCutter that will use techniques to shorten the
time to compute the result. The two versions must produce the same result,
just their computational efficiencies must be different.

Write a test to verify that the time taken by the second implementation is at least an order of magnitude faster than the first solution.

After you complete the program, answer the following questions:

1. What design principles did you use in this program? Explain each
and specify the classes that participated.

We used Do not Repeat Yourself(DRY) design principle. This principle states that we should minimize the code and effort of writing the same code everywhere. What happens that when we replicate our code and if in the future, any modification made, then we will have to make changes everywhere. By violating this principle, we not only waste our time and resources but it also slows down the overall project development.

As in this assignment, MemoizedRodCutter class is the optimized version of RodCutter. Initially, in MemoizedRodCutter we had replicated most of the logic from RodCutter class. Hence, it was a violation of the DRY principle. Also, we violated the DRY principle by writing the same test cases in MemoizedRodCutterTest which were already written in RodCutterTest class.

At last, feedback really helped us to align properly with DRY principle and we reused the code from RodCutter and RodCutterTest classes.

We also violated the YAGNI principle at first by keeping the state in RodCutter class which we did not need at all. So by removing the state from Rodcutter class, we ensured keeping the code that we really need. 

We achieved substitutability when MemoizedRodCutterTest extended RodCutterTest class. The motivation behind was code reusability, we wanted to reuse the tests in RodCutterTest class. 

 
2. What design patterns did you use in this program? Explain each
and specify the classes that participated.

We have used the Factory Method where the subclass decides which class to instantiate. We created MemoizedRodCutterTest class extends RodCutterTest and is responsible for providing its own object. With this code, we were able to reuse the tests in RodCutterTest class and follow the DRY principle.

Total [100]: 94
All tests pass [20]:
Test Quality [10]:
Performance Test Quality [10]:
Code Coverage [10]:
Design Quality [20]:
Code Quality [10]:

Q1 [10]: -1
More principles?

Q2 [10]: -5
More patterns?